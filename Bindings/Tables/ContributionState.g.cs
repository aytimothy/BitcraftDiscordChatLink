// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.


#nullable enable

using System;
using SpacetimeDB;
using SpacetimeDB.BSATN;
using SpacetimeDB.ClientApi;
using System.Collections.Generic;
using System.Runtime.Serialization;

namespace BitCraftRegion.Types
{
    public sealed partial class RemoteTables
    {
        public sealed class ContributionStateHandle : RemoteTableHandle<EventContext, ContributionState>
        {
            protected override string RemoteTableName => "contribution_state";

            public sealed class EnemyEntityIdIndex : BTreeIndexBase<ulong>
            {
                protected override ulong GetKey(ContributionState row) => row.EnemyEntityId;

                public EnemyEntityIdIndex(ContributionStateHandle table) : base(table) { }
            }

            public readonly EnemyEntityIdIndex EnemyEntityId;

            public sealed class EntityIdUniqueIndex : UniqueIndexBase<ulong>
            {
                protected override ulong GetKey(ContributionState row) => row.EntityId;

                public EntityIdUniqueIndex(ContributionStateHandle table) : base(table) { }
            }

            public readonly EntityIdUniqueIndex EntityId;

            public sealed class PlayerEnemyEntityIdIndex : BTreeIndexBase<(ulong PlayerEntityId, ulong EnemyEntityId)>
            {
                protected override (ulong PlayerEntityId, ulong EnemyEntityId) GetKey(ContributionState row) => (row.PlayerEntityId, row.EnemyEntityId);

                public PlayerEnemyEntityIdIndex(ContributionStateHandle table) : base(table) { }
            }

            public readonly PlayerEnemyEntityIdIndex PlayerEnemyEntityId;

            internal ContributionStateHandle(DbConnection conn) : base(conn)
            {
                EnemyEntityId = new(this);
                EntityId = new(this);
                PlayerEnemyEntityId = new(this);
            }

            protected override object GetPrimaryKey(ContributionState row) => row.EntityId;
        }

        public readonly ContributionStateHandle ContributionState;
    }
}
