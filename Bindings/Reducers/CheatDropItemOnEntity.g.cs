// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.


#nullable enable

using System;
using SpacetimeDB;
using SpacetimeDB.ClientApi;
using System.Collections.Generic;
using System.Runtime.Serialization;

namespace BitCraftRegion.Types
{
    public sealed partial class RemoteReducers : RemoteBase
    {
        public delegate void CheatDropItemOnEntityHandler(ReducerEventContext ctx, ulong entityId, int itemId, int quantity, bool isCargo, ulong ownerEntityId);
        public event CheatDropItemOnEntityHandler? OnCheatDropItemOnEntity;

        public void CheatDropItemOnEntity(ulong entityId, int itemId, int quantity, bool isCargo, ulong ownerEntityId)
        {
            conn.InternalCallReducer(new Reducer.CheatDropItemOnEntity(entityId, itemId, quantity, isCargo, ownerEntityId), this.SetCallReducerFlags.CheatDropItemOnEntityFlags);
        }

        public bool InvokeCheatDropItemOnEntity(ReducerEventContext ctx, Reducer.CheatDropItemOnEntity args)
        {
            if (OnCheatDropItemOnEntity == null)
            {
                if (InternalOnUnhandledReducerError != null)
                {
                    switch (ctx.Event.Status)
                    {
                        case Status.Failed(var reason): InternalOnUnhandledReducerError(ctx, new Exception(reason)); break;
                        case Status.OutOfEnergy(var _): InternalOnUnhandledReducerError(ctx, new Exception("out of energy")); break;
                    }
                }
                return false;
            }
            OnCheatDropItemOnEntity(
                ctx,
                args.EntityId,
                args.ItemId,
                args.Quantity,
                args.IsCargo,
                args.OwnerEntityId
            );
            return true;
        }
    }

    public abstract partial class Reducer
    {
        [SpacetimeDB.Type]
        [DataContract]
        public sealed partial class CheatDropItemOnEntity : Reducer, IReducerArgs
        {
            [DataMember(Name = "entity_id")]
            public ulong EntityId;
            [DataMember(Name = "item_id")]
            public int ItemId;
            [DataMember(Name = "quantity")]
            public int Quantity;
            [DataMember(Name = "is_cargo")]
            public bool IsCargo;
            [DataMember(Name = "owner_entity_id")]
            public ulong OwnerEntityId;

            public CheatDropItemOnEntity(
                ulong EntityId,
                int ItemId,
                int Quantity,
                bool IsCargo,
                ulong OwnerEntityId
            )
            {
                this.EntityId = EntityId;
                this.ItemId = ItemId;
                this.Quantity = Quantity;
                this.IsCargo = IsCargo;
                this.OwnerEntityId = OwnerEntityId;
            }

            public CheatDropItemOnEntity()
            {
            }

            string IReducerArgs.ReducerName => "cheat_drop_item_on_entity";
        }
    }

    public sealed partial class SetReducerFlags
    {
        internal CallReducerFlags CheatDropItemOnEntityFlags;
        public void CheatDropItemOnEntity(CallReducerFlags flags) => CheatDropItemOnEntityFlags = flags;
    }
}
